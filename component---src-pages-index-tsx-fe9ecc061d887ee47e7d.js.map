{"version":3,"file":"component---src-pages-index-tsx-fe9ecc061d887ee47e7d.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./node_modules/@mui/material/styles/cssUtils.js","webpack://jacdac-docs/./node_modules/@mui/material/styles/responsiveFontSizes.js","webpack://jacdac-docs/./src/components/makecode/MakeCodeAddBlocksButton.tsx","webpack://jacdac-docs/./src/components/makecode/MakeCodeBlocksAndSimsBox.tsx","webpack://jacdac-docs/./src/jacdac/usePersistentSimulators.ts","webpack://jacdac-docs/./src/pages/index.tsx"],"sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { NoSsr } from \"@mui/material\"\nimport ConnectButtons from \"../buttons/ConnectButtons\"\nimport useDevices from \"../hooks/useDevices\"\nimport { UIFlags } from \"../../jacdac/providerbus\"\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useDevices({ serviceClass, ignoreInfrastructure: true })\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if ((!UIFlags.connect && !transports.length) || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <Box component=\"span\" ml={2}>\n                    <ConnectButtons full=\"always\" transparent={true} />\n                </Box>\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = _extends({}, themeInput);\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography;\n\n  // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n    if (remFontSize <= 1) {\n      return;\n    }\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : _formatMuiErrorMessage(6));\n    }\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n    let transform = null;\n    if (!disableAlign) {\n      transform = value => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}","import Tooltip from \"../ui/Tooltip\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport React, { useMemo } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport IFrameBridgeClient from \"./iframebridgeclient\"\nimport MakeCodeIcon from \"../../components/icons/MakeCodeIcon\"\nimport useBus from \"../../jacdac/useBus\"\n\nexport default function MakeCodeAddBlocksButton() {\n    const bus = useBus()\n    const iframeBridge = bus.nodeData[\n        IFrameBridgeClient.DATA_ID\n    ] as IFrameBridgeClient\n    const extensions = useChange(iframeBridge, _ => _?.candidateExtensions())\n    const handleAdd = () => iframeBridge?.postAddExtensions()\n    const isMakeCodeTool = useMemo(\n        () =>\n            typeof window !== \"undefined\" &&\n            /makecode/.test(window.location.href),\n        []\n    )\n    const isButtonEnabled = !!extensions?.length\n\n    //TODO: i18n\n    const enabledTooltip =\n        \"Add blocks for your connected and simulated devices to the modules drawer\"\n    const disabledTooltip =\n        \"This button becomes available if you have devices connected that don't have their matching blocks added to the 'Modules' drawer\"\n\n    // if (!isMakeCodeTool) return null\n\n    return (\n        <Tooltip\n            describeChild\n            title={isButtonEnabled ? enabledTooltip : disabledTooltip}\n            placement=\"bottom\"\n        >\n            <span>\n                <Button\n                    sx={{ mr: 1 }}\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={!isButtonEnabled}\n                    startIcon={<MakeCodeIcon />}\n                    onClick={handleAdd}\n                >\n                    Add blocks\n                </Button>\n            </span>\n        </Tooltip>\n    )\n}\n","import { Box } from \"@mui/material\"\nimport React from \"react\"\nimport StartMissingSimulatorsButton from \"../buttons/StartMissingSimulatorsButton\"\nimport MakeCodeAddBlocksButton from \"./MakeCodeAddBlocksButton\"\n\nexport default function MakeCodeBlocksAndSimsBox() {\n\n  return (\n      <Box m={1}>\n        <MakeCodeAddBlocksButton />\n        <StartMissingSimulatorsButton\n        variant=\"contained\"\n        >\n          Add Simulators\n        </StartMissingSimulatorsButton>\n      </Box>\n      )\n}\n","import { useEffect } from \"react\"\nimport {\n    DEVICE_CONNECT,\n    DEVICE_DISCONNECT,\n} from \"../../jacdac-ts/src/jdom/constants\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitions,\n} from \"../../jacdac-ts/src/servers/servers\"\nimport useLocalStorage from \"../components/hooks/useLocalStorage\"\nimport useBus from \"./useBus\"\n\nconst STORAGE_KEY = \"active_simulators\"\nconst STORAGE_EXPIRATION = 3600_000\n\ninterface Simulators {\n    update?: number\n    templates: string[]\n}\n\nexport function usePersistentSimulators() {\n    const [simulators, setSimulators] = useLocalStorage<Simulators>(\n        STORAGE_KEY,\n        undefined\n    )\n    const bus = useBus()\n    const resolveTemplates = () =>\n        bus\n            .serviceProviders()\n            .map(sp => sp.template)\n            .filter(t => !!t)\n\n    const snapshot = () => {\n        const templates = resolveTemplates()\n        setSimulators({\n            update: Date.now(),\n            templates,\n        })\n    }\n\n    useEffect(() => {\n        if ((simulators?.update || 0) - Date.now() < STORAGE_EXPIRATION) {\n            const serviceProviders = serviceProviderDefinitions()\n            const templates = resolveTemplates()\n            simulators?.templates?.forEach(template => {\n                const i = templates.indexOf(template)\n                if (i > -1) {\n                    templates.splice(i, 1)\n                } else {\n                    const def = serviceProviders.find(\n                        sp => sp.name === template\n                    )\n                    if (def) addServiceProvider(bus, def)\n                }\n            })\n        }\n        snapshot()\n    }, [])\n\n    useEffect(\n        () => bus.subscribe([DEVICE_CONNECT, DEVICE_DISCONNECT], snapshot),\n        [bus]\n    )\n}\n","import React, { useContext, useEffect } from \"react\"\nimport { createTheme, responsiveFontSizes } from \"@mui/material\"\nimport ThemedLayout from \"../components/ui/ThemedLayout\"\nimport { JDDevice } from \"../../jacdac-ts/src/jdom/device\"\nimport { isReading, isValueOrIntensity } from \"../../jacdac-ts/src/jdom/spec\"\nimport { strcmp } from \"../../jacdac-ts/src/jdom/utils\"\nimport Dashboard from \"../components/dashboard/Dashboard\"\nimport DarkModeContext from \"../components/ui/DarkModeContext\"\nimport IFrameBridgeClient from \"../components/makecode/iframebridgeclient\"\nimport useBus from \"../jacdac/useBus\"\nimport MakeCodeBlocksAndSimsBox from \"../components/makecode/MakeCodeBlocksAndSimsBox\"\nimport { usePersistentSimulators } from \"../jacdac/usePersistentSimulators\"\n\n/**\n * To debug locally:\n *\n * - launch yarn develop\n * - launch pxt serve + ?localhostmessagesims=1\n * - launch jacdac project\n */\n\nfunction deviceSort(l: JDDevice, r: JDDevice): number {\n    const srvScore = (srv: jdspec.ServiceSpec) =>\n        srv.packets.reduce(\n            (prev, pkt) =>\n                prev + (isReading(pkt) ? 10 : isValueOrIntensity(pkt) ? 1 : 0),\n            0\n        ) || 0\n    const score = (srvs: jdspec.ServiceSpec[]) =>\n        srvs.reduce((prev, srv) => srvScore(srv), 0)\n\n    const ls = score(\n        l\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    const rs = score(\n        r\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    if (ls !== rs) return -ls + rs\n    return strcmp(l.deviceId, r.deviceId)\n}\n\nfunction Carousel() {\n    const bus = useBus()\n    const iframeBridge = bus.nodeData[\n        IFrameBridgeClient.DATA_ID\n    ] as IFrameBridgeClient\n    const deviceFilter = iframeBridge?.deviceFilter.bind(iframeBridge)\n    const serviceFilter = iframeBridge?.serviceFilter.bind(iframeBridge)\n\n    useEffect(() => {\n        bus.streaming = true\n        bus.broadcastDisconnectRequest()\n    }, [])\n\n    usePersistentSimulators()\n\n    return (\n        <>\n            <MakeCodeBlocksAndSimsBox />\n            <Dashboard\n                showHeader={false}\n                showDeviceHeader={true}\n                showDeviceAvatar={true}\n                deviceSort={deviceSort}\n                deviceFilter={deviceFilter}\n                serviceFilter={serviceFilter}\n                showStartRoleSimulators={false}\n                alwaysVisible={true}\n                variant=\"icon\"\n                controlled={true}\n            />\n        </>\n    )\n}\n\nexport default function Page() {\n    const { toggleDarkMode, darkModeMounted } = useContext(DarkModeContext)\n    const rawTheme = createTheme({\n        palette: {\n            primary: {\n                main: \"#85e\",\n            },\n            secondary: {\n                main: \"#ffc400\",\n            },\n            background: {\n                default: \"#fff\",\n            },\n            mode: \"light\",\n            contrastThreshold: 3.1,\n        },\n    })\n    const theme = responsiveFontSizes(rawTheme)\n\n    useEffect(() => {\n        if (darkModeMounted) toggleDarkMode(\"light\")\n    }, [darkModeMounted])\n\n    return (\n        <ThemedLayout theme={theme}>\n                <style>\n                    {`\nhtml {\n    margin-right: 4px;\n}\nhtml, body {\n    background: transparent !important;\n    overflow: hidden !important;\n}\n`}\n                </style>\n            <Carousel />\n        </ThemedLayout>\n    )\n}\n"],"names":["useContext","devices","useDevices","ignoreInfrastructure","spec","serviceSpecificationFromClassIdentifier","UIFlags","transports","bus","useBus","iframeBridge","IFrameBridgeClient","extensions","useChange","_","handleAdd","isMakeCodeTool","useMemo","window","isButtonEnabled","enabledTooltip","disabledTooltip","mr","STORAGE_KEY","STORAGE_EXPIRATION","useLocalStorage","resolveTemplates","sp","t","snapshot","templates","setSimulators","update","Date","useEffect","serviceProviders","serviceProviderDefinitions","simulators","template","i","def","addServiceProvider","srvScore","srv","prev","isReading","isValueOrIntensity","score","srvs","ls","l","rs","r","strcmp","deviceFilter","serviceFilter","usePersistentSimulators","darkModeMounted","rawTheme","createTheme","palette","primary","main","secondary","background","default","mode","contrastThreshold","theme","responsiveFontSizes","toggleDarkMode"],"sourceRoot":""}