{"version":3,"file":"4984-201d531ca4559a0a883a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,GAAMA,CAAAA,iBAAiB,cAAGC,cAAI,CAAC,IAAM,qGAAP,CAA9B,CAEe,wBAKZ,CACC,mBACI,8DACI,sCAFR,KAEQ,CADJ,CADJ,CAKH;;;;ACDc,yBAA0D,CACrE,GAAM,aAAN,MACA,GAAM,8BAAN,MACA,GAAM,iBAAqBC,oBAAU,CAArC,6BAAqC,CAArC,CAEA,GAAMC,CAAAA,WAAW,CAAG,IAAM,CACtBC,cAAc,CAAdA,KAAc,CAAdA,CACAC,iCAAQ,CAARA,eAAQ,CAARA,CAFJ,EAKA,mBACI,0DACI,+CACI,KAAK,CADT,KAEI,SAAS,CAAKC,iCAAc,CAAnB,QAAmB,CAAdA,CAAL,IAAKA,CAAL,MAAKA,CAHtB,UACI,EADJ,cAKI,oDACKC,WAAW,eAAI,8BAAU,MAAM,CANxC,WAMwB,EADpB,CALJ,cAQI,iEACI,2CAAQ,OAAO,CAAf,YAA8B,OAAO,CAArC,YAVZ,QAUY,CADJ,CARJ,CADJ,CAgBH;;;;AChCc,oBAAqB,CAChC,GAAMC,CAAAA,eAAe,CAAGC,qCAAxB,GACA,GAAMC,CAAAA,IAAI,CAAGC,uCAAc,CAA3B,WAA2B,CAA3B,CAeA,GAAMC,CAAAA,MAAwC,CAAGF,IAAI,CAAJA,YAAAA,CAAAA,KAAAA,CAAAA,MAAAA,CACrCG,IAAI,0BAAI,mBAAI,CAAJ,iEAAJ,OADiCH,CAAAA,EAAAA,GAAAA,CAExCG,IAAI,EAAI,CACT,MAAO,CACHC,KAAK,CAAEC,gCAAU,CAACF,IAAI,CADnB,OACc,CADd,CAEHG,IAAI,CAAEH,IAAI,CAAJA,MAAAA,CAFV,IAAO,CAAP,CAHyCH,CAAAA,EAAAA,MAAAA,CAQrCI,KAAK,EAAI,CAAC,CAACA,KAAK,CAR5B,KAAiDJ,CAAjD,CAUA,mBACI,0CAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,GACKE,MAAM,CAANA,GAAAA,CAAW,UAAC,OAAD,IAAC,EAAD,wBACR,0CAAM,IAAI,CAAV,KAAW,GAAG,CAAd,mBACI,6CAAW,IAAI,CAAf,KAAuB,KAAK,CAA5B,OAFI,eAEJ,EADJ,CADQ,CAFpB,CAESA,CADL,CADJ,CASH","sources":["webpack://jacdac-docs/./src/components/ui/Markdown.tsx","webpack://jacdac-docs/./src/components/trace/TraceCard.tsx","webpack://jacdac-docs/./src/components/trace/TraceList.tsx"],"sourcesContent":["import React, { lazy } from \"react\"\nimport Suspense from \"./Suspense\"\nconst SuspensedMarkdown = lazy(() => import(\"./SuspensedMarkdown\"))\n\nexport default function Markdown(props: {\n    source: string\n    className?: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    components?: Partial<any>\n}) {\n    return (\n        <Suspense>\n            <SuspensedMarkdown {...props} />\n        </Suspense>\n    )\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n} from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport { prettyDuration } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport { Trace } from \"../../../jacdac-ts/src/jdom/trace/trace\"\nimport Markdown from \"../ui/Markdown\"\nimport PacketsContext from \"../PacketsContext\"\nimport { navigate } from \"gatsby\"\n\nexport default function TraceCard(props: { name: string; trace: Trace }) {\n    const { name, trace } = props\n    const { description, duration, length } = trace\n    const { setReplayTrace } = useContext(PacketsContext)\n\n    const handleClick = () => {\n        setReplayTrace(trace)\n        navigate(\"/tools/player\");\n    }\n\n    return (\n        <Card>\n            <CardHeader\n                title={name}\n                subheader={`${prettyDuration(duration)}, ${length} packets`}\n            />\n            <CardContent>\n                {description && <Markdown source={description} />}\n            </CardContent>\n            <CardActions>\n                <Button onClick={handleClick} variant=\"outlined\">\n                    import\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n","import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { parseTrace } from \"../../../jacdac-ts/src/jdom/logparser\"\nimport { Trace } from \"../../../jacdac-ts/src/jdom/trace/trace\"\nimport { Grid } from \"@mui/material\"\nimport TraceCard from \"./TraceCard\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\n\nexport default function TraceList() {\n    const gridBreakpoints = useGridBreakpoints()\n    const data = useStaticQuery(graphql`\n        query {\n            allPlainText {\n                nodes {\n                    content\n                    parent {\n                        ... on File {\n                            name\n                            ext\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const traces: { trace: Trace; name: string }[] = data.allPlainText.nodes\n        .filter(node => node.parent?.ext === \".txt\")\n        .map(node => {\n            return {\n                trace: parseTrace(node.content as string),\n                name: node.parent.name as string,\n            }\n        })\n        .filter(trace => !!trace.trace)\n\n    return (\n        <Grid container spacing={2}>\n            {traces.map(({ trace, name }) => (\n                <Grid item key={name}>\n                    <TraceCard name={name} trace={trace} {...gridBreakpoints} />\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n"],"names":["SuspensedMarkdown","lazy","useContext","handleClick","setReplayTrace","navigate","prettyDuration","description","gridBreakpoints","useGridBreakpoints","data","useStaticQuery","traces","node","trace","parseTrace","name"],"sourceRoot":""}