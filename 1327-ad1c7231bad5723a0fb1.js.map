{"version":3,"file":"1327-ad1c7231bad5723a0fb1.js","mappings":";;;;;;;AAAa;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;AACnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;AACf,4CAA4C,mBAAO,CAAC,KAAuB;AAC3E,kBAAkB,mBAAO,CAAC,KAAmB;AAC7C;AACA;AACA,CAAC;AACD,SAAe;;;;;;;;;;;;;;;;;;;;;;;;;ACHf;AAEA;AAQe,+BAGZ,CACC,GAAM,kBAAN,MACA,GAAM,iBAAgBA,+CAAQ,CAA9B,IAA8B,CAA9B,CACA,GAAMC,CAAAA,OAAO,CAAGC,4CAAhB,GACA,GAAMC,CAAAA,aAAa,CAAGC,8EAAtB,GAEA,GAAMC,CAAAA,OAAO,CAAG,IACZC,MAAM,CACAH,aAAa,CADb,cACAA,EADA,CAEAI,QAAQ,CACRJ,aAAa,CAAbA,gBAAAA,CAA+B,CADvB,GACRA,CADQ,CAERA,aAAa,CALvB,eAKUA,EALV,CAOA,GAAM,qBAAoBH,+CAAQ,CAACK,OAAnC,EAAkC,CAAlC,CACA,GAAM,iCAAgCL,+CAAQ,CAA9C,KAA8C,CAA9C,CAEA,GAAMQ,CAAAA,gBAAgB,CAAG,IAAM,CAC3B,GAAMC,CAAAA,CAAC,CAAGJ,OAAV,GACAK,QAAQ,CAARA,CAAQ,CAARA,CACAC,cAAc,CAAdA,KAAc,CAAdA,CAHJ,EAKA,GAAMC,CAAAA,UAAU,mIAAG,WAAY,CAC3B,GAAI,CACA,KAAMC,CAAAA,SAAS,CAATA,SAAAA,CAAAA,SAAAA,CAAN,KAAMA,CAAN,CACAF,cAAc,CAAdA,IAAc,CAAdA,CACF,WAAY,CACVA,cAAc,CAAdA,KAAc,CAAdA,CAEP,CAPe,SAAVC,SAAAA,CAAAA,UAAAA,EAAU,qCAAhB,CAAgB,EAAhB,CAQA,GAAME,CAAAA,SAAS,CAAG,cAA0B,CACxCC,MAAM,CAANA,OAAM,CAANA,CADJ,EAGAC,gDAAS,kBAAmB,CAA5BA,GAA4B,CAAnB,CAATA,CACA,GAAMC,CAAAA,KAAK,CAAGX,MAAM,4BAEdC,QAAQ,6BAFd,4BAKA,mBACI,kIACI,kIACI,iHAAY,KAAK,CADrB,KACI,EADJ,cAEI,qHACKW,KAAK,GAALA,SAAAA,EAAAA,aACG,kHAAY,OAAO,CAAnB,KAAyB,SAAS,CAAlC,mBACI,kHACI,EAAE,CADN,QAEI,KAAK,CAFT,MAGI,QAAQ,CAHZ,KAII,UAAU,CAAE,CACR,aANZ,sBAKoB,CAJhB,EADJ,CASKC,WAAW,eAAI,6HAX5B,IAW4B,CATpB,CAFR,CAcKD,KAAK,GAALA,SAAAA,EAAAA,aACG,6GAAO,QAAQ,CAAf,SAjBZ,kDAiBY,CAfR,CAFJ,cAsBI,sHACKX,QAAQ,eACL,uHACI,KAAK,CADT,MAEI,OAAO,CAFX,IAGI,QAAQ,CALpB,SAEQ,EAFR,cAQI,yHACI,aADJ,kCAEI,IAAI,CAFR,QAGI,OAAO,CAHX,YAII,OAAO,CAJX,YARJ,MAQI,CARJ,cAgBI,yHACI,aADJ,2BAEI,IAAI,CAFR,QAGI,OAAO,CAHX,YAII,KAAK,CAJT,UAKI,OAAO,CALX,kBAxChB,YAwCgB,CAhBJ,CAtBJ,CADJ,CADJ,CAqDH","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Check.js","webpack://jacdac-docs/./src/components/RandomGenerator.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');\nexports.default = _default;","import React, { useEffect, useState } from \"react\"\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    CardHeader,\n    Typography,\n    Input,\n} from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport CheckIcon from \"@mui/icons-material/Check\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"./ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport { NoSsr } from \"@mui/material\"\nimport { useId } from \"react\"\nimport useDeviceCatalog from \"./devices/useDeviceCatalog\"\nimport SwitchWithLabel from \"./ui/SwitchWithLabel\"\n\nexport default function RandomGenerator(props: {\n    device?: boolean\n    firmware?: boolean\n}) {\n    const { device, firmware } = props\n    const [hex, setHex] = useState(true)\n    const fieldId = useId()\n    const deviceCatalog = useDeviceCatalog()\n\n    const compute = () =>\n        device\n            ? deviceCatalog.uniqueDeviceId()\n            : firmware\n            ? deviceCatalog.uniqueFirmwareId(!hex)\n            : deviceCatalog.uniqueServiceId()\n\n    const [value, setValue] = useState(compute())\n    const [copySuccess, setCopySuccess] = useState(false)\n\n    const handleRegenerate = () => {\n        const v = compute()\n        setValue(v)\n        setCopySuccess(false)\n    }\n    const handleCopy = async () => {\n        try {\n            await navigator.clipboard.writeText(value)\n            setCopySuccess(true)\n        } catch (err) {\n            setCopySuccess(false)\n        }\n    }\n    const handleHex = (ev, checked: boolean) => {\n        setHex(checked)\n    }\n    useEffect(handleRegenerate, [hex])\n    const title = device\n        ? \"Random Device Identifier\"\n        : firmware\n        ? \"Random Product Identifier\"\n        : \"Random Service Identifier\"\n    return (\n        <NoSsr>\n            <Card>\n                <CardHeader title={title} />\n                <CardContent>\n                    {value !== undefined && (\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <Input\n                                id={fieldId}\n                                value={value}\n                                readOnly={true}\n                                inputProps={{\n                                    \"aria-label\": \"generated identifier\",\n                                }}\n                            />\n                            {copySuccess && <CheckIcon />}\n                        </Typography>\n                    )}\n                    {value === undefined && (\n                        <Alert severity=\"error\">\n                            Oops, unable to generate a strong random number.\n                        </Alert>\n                    )}\n                </CardContent>\n                <CardActions>\n                    {firmware && (\n                        <SwitchWithLabel\n                            label=\"hex\"\n                            checked={hex}\n                            onChange={handleHex}\n                        />\n                    )}\n                    <Button\n                        aria-label=\"copy random number to clipboard\"\n                        size=\"small\"\n                        variant=\"contained\"\n                        onClick={handleCopy}\n                    >\n                        Copy\n                    </Button>\n                    <Button\n                        aria-label=\"regenerate random number\"\n                        size=\"small\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleRegenerate}\n                    >\n                        Regenerate\n                    </Button>\n                </CardActions>\n            </Card>\n        </NoSsr>\n    )\n}\n"],"names":["useState","fieldId","useId","deviceCatalog","useDeviceCatalog","compute","device","firmware","handleRegenerate","v","setValue","setCopySuccess","handleCopy","navigator","handleHex","setHex","useEffect","title","value","copySuccess"],"sourceRoot":""}