{"version":3,"file":"6178-fe1c50d09b5e86cbd95e.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/python/PythonProjects.tsx","webpack://jacdac-docs/./src/components/ui/PageLinkList.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\"\nimport React, { useMemo } from \"react\"\nimport { ReactNode } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { arrayify, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport PageLinkList from \"../ui/PageLinkList\"\n\nexport default function PythonProjects(props: {\n    header?: ReactNode\n    serviceClass?: number | number[]\n    serviceName?: string\n}) {\n    const { serviceName, serviceClass, header } = props\n    const serviceNames = unique([\n        ...(serviceName?.split(/\\s*,\\s*/gi).filter(s => !!s) || []),\n        ...(arrayify(serviceClass)\n            ?.map(sc => serviceSpecificationFromClassIdentifier(sc)?.shortId)\n            .filter(s => !!s) || []),\n    ])\n\n    const query = useStaticQuery<{\n        allMdx: {\n            edges: {\n                node: {\n                    fields: {\n                        slug: string\n                    }\n                    frontmatter: {\n                        title?: string\n                        order?: number\n                        services?: string\n                        description?: string\n                    }\n                }\n            }[]\n        }\n    }>(graphql`\n        {\n            allMdx(\n                filter: {\n                    fields: { slug: { glob: \"/clients/python/projects/*\" } }\n                }\n            ) {\n                edges {\n                    node {\n                        id\n                        fields {\n                            slug\n                        }\n                        frontmatter {\n                            title\n                            order\n                            services\n                            description\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const nodes = useMemo(() => {\n        // grab the nodes\n        let nodes = query.allMdx.edges.map(edge => edge.node)\n        // filter out\n        if (serviceNames?.length)\n            nodes = nodes.filter(node =>\n                serviceNames.some(\n                    n => node.frontmatter.services?.indexOf(n) > -1\n                )\n            )\n        // order nodes\n        nodes = nodes.sort((l, r) => {\n            const lo = Number(l.frontmatter?.order) || 50\n            const ro = Number(r.frontmatter?.order) || 50\n            const c = lo - ro\n            if (c) return c\n            return l.fields.slug.localeCompare(r.fields.slug)\n        })\n        return nodes.map(({ fields, frontmatter }) => ({\n            slug: fields.slug,\n            title: frontmatter.title,\n            description: frontmatter.description,\n            services: frontmatter.services,\n        }))\n    }, [serviceNames.join(\",\")])\n\n    return <PageLinkList header={header} nodes={nodes} />\n}\n","import {\n    Chip,\n    List,\n    ListItem,\n    ListItemText,\n    ListProps,\n    Typography,\n} from \"@mui/material\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport React, { ReactNode, useMemo } from \"react\"\nimport { serviceSpecificationFromName } from \"../../../jacdac-ts/src/jdom/spec\"\nimport ChipList from \"./ChipList\"\n\nexport interface PageLinkListItemProps {\n    slug?: string\n    href?: string\n    title: string\n    description?: string\n    services?: string\n    order?: number\n    date?: string\n}\n\nfunction PageLinkListItem(props: PageLinkListItemProps) {\n    const { slug, href, title, description, services } = props\n    const specs = useMemo(\n        () =>\n            services\n                ?.split(/\\s*,\\s*/gi)\n                .map(serviceSpecificationFromName)\n                .filter(s => !!s),\n        [services]\n    )\n    return (\n        <ListItem key={slug}>\n            <ListItemText\n                primary={\n                    <Link\n                        underline=\"hover\"\n                        color=\"textPrimary\"\n                        rel=\"noopener noreferrer\"\n                        to={slug}\n                        href={href}\n                    >\n                        {title}\n                    </Link>\n                }\n                secondary={\n                    <ChipList>\n                        {description && (\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                                {description}\n                            </Typography>\n                        )}\n                        {specs?.map(({ shortId, name }) => (\n                            <Chip\n                                component=\"span\"\n                                key={shortId}\n                                label={name}\n                                size=\"small\"\n                            />\n                        ))}\n                    </ChipList>\n                }\n            />\n        </ListItem>\n    )\n}\n\nexport type PageQuery = {\n    allMdx: {\n        nodes: {\n            excerpt?: string\n            fields: {\n                slug: string\n            }\n            frontmatter: {\n                title?: string\n                description?: string\n                order?: number\n                date?: string\n            }\n        }[]\n    }\n}\n\nexport function pageQueryToNodes(data: PageQuery) {\n    const nodes = data?.allMdx?.nodes.map(\n        ({ excerpt, frontmatter, fields }) => ({\n            slug: fields?.slug,\n            title: frontmatter?.title,\n            description: frontmatter?.description || excerpt,\n            order: frontmatter.order,\n            date: frontmatter.date,\n        })\n    )\n    return nodes\n}\n\nexport default function PageLinkList(\n    props: {\n        header?: ReactNode\n        nodes: PageLinkListItemProps[]\n    } & ListProps\n) {\n    const { header, nodes, ...rest } = props\n    const sorted = nodes?.sort((l, r) => {\n        const ld = Date.parse(l?.date) || 0\n        const rd = Date.parse(r?.date) || 0\n        const dc = ld - rd\n        if (dc) return dc\n\n        const lo = Number(l?.order) || 50\n        const ro = Number(r?.order) || 50\n        const c = lo - ro\n        if (c) return c\n        return (l.slug || l.href).localeCompare(r.slug || r.href)\n    })\n    return (\n        !!sorted?.length && (\n            <>\n                {header}\n                <List {...rest}>\n                    {sorted?.map(node => (\n                        <PageLinkListItem\n                            key={node.slug || node.href}\n                            {...node}\n                        />\n                    ))}\n                </List>\n            </>\n        )\n    )\n}\n"],"names":["serviceNames","unique","s","sc","serviceSpecificationFromClassIdentifier","query","useStaticQuery","nodes","useMemo","edge","node","n","lo","Number","l","ro","r","c","slug","fields","title","frontmatter","description","services","specs","data","order","date","rest","sorted","ld","Date","rd","dc"],"sourceRoot":""}